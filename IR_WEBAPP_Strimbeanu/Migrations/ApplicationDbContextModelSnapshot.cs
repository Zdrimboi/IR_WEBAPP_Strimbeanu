// <auto-generated />
using System;
using IR_WEBAPP_Strimbeanu.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IR_WEBAPP_Strimbeanu.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PdfUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LongDescription = "High-performance Laptop Apple MacBook",
                            Name = "Laptop Apple MacBook Air 13-inch",
                            PdfUrl = "/docs/laptop.pdf",
                            ShortDescription = "Laptop Apple MacBook",
                            ThumbnailUrl = "/images/laptop1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LongDescription = "Latest Android smartphone",
                            Name = "Smartphone",
                            PdfUrl = "/docs/phone.pdf",
                            ShortDescription = "Android Phone",
                            ThumbnailUrl = "/images/phone1.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            LongDescription = "Wireless noise-canceling headphones",
                            Name = "Headphones",
                            PdfUrl = "/docs/headphones.pdf",
                            ShortDescription = "Noise-canceling",
                            ThumbnailUrl = "/images/headphones1.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LongDescription = "Learn C# from scratch",
                            Name = "C# Programming",
                            PdfUrl = "/docs/csharp.pdf",
                            ShortDescription = "C# Book",
                            ThumbnailUrl = "/images/csharp1.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            LongDescription = "Master Blazor and .NET",
                            Name = "Blazor Guide",
                            PdfUrl = "/docs/blazor.pdf",
                            ShortDescription = "Blazor Development",
                            ThumbnailUrl = "/images/blazor1.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            LongDescription = "Understand software design principles",
                            Name = "Software Design Patterns",
                            PdfUrl = "/docs/designpatterns.pdf",
                            ShortDescription = "Design Patterns",
                            ThumbnailUrl = "/images/designpatterns1.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            LongDescription = "Comfortable office chair with lumbar support",
                            Name = "Office Chair",
                            PdfUrl = "/docs/chair.pdf",
                            ShortDescription = "Ergonomic Chair",
                            ThumbnailUrl = "/images/chair1.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            LongDescription = "Modern wooden office desk",
                            Name = "Desk",
                            PdfUrl = "/docs/desk.pdf",
                            ShortDescription = "Wooden Desk",
                            ThumbnailUrl = "/images/desk1.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            LongDescription = "Spacious bookshelf for organizing books",
                            Name = "Bookshelf",
                            PdfUrl = "/docs/bookshelf.pdf",
                            ShortDescription = "Wooden Shelf",
                            ThumbnailUrl = "/images/bookshelf1.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            LongDescription = "Energy-efficient LED table lamp",
                            Name = "Table Lamp",
                            PdfUrl = "/docs/lamp.pdf",
                            ShortDescription = "LED Lamp",
                            ThumbnailUrl = "/images/lamp1.jpg"
                        });
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/images/laptop1.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/images/laptop2.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/images/phone1.avif",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/images/phone2.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "/images/headphones1.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "/images/headphones2.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "/images/csharp1.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "/images/csharp2.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "/images/blazor1.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "/images/blazor2.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "/images/designpatterns1.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "/images/designpatterns2.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "/images/chair1.jpg",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 14,
                            ImageUrl = "/images/chair2.jpg",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 15,
                            ImageUrl = "/images/desk1.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 16,
                            ImageUrl = "/images/desk2.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 17,
                            ImageUrl = "/images/bookshelf1.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 18,
                            ImageUrl = "/images/bookshelf2.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 19,
                            ImageUrl = "/images/lamp1.jpg",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 20,
                            ImageUrl = "/images/lamp2.jpg",
                            ProductId = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Product", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.ProductImage", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
