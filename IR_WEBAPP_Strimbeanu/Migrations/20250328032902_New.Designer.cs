// <auto-generated />
using System;
using IR_WEBAPP_Strimbeanu.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IR_WEBAPP_Strimbeanu.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250328032902_New")]
    partial class New
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f56e9cf-da16-4822-bda4-d18e7fdcabaf",
                            Email = "user1@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@TEST.COM",
                            NormalizedUserName = "USER1@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWFXTIik1MxcXpheACj9YPZwNl1NK+jpQGV94RMOYpsf0zOeeHvexKsRjXgv6hXZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e5ed6c6-d044-454e-960f-2b24a091d53e",
                            TwoFactorEnabled = false,
                            UserName = "user1@test.com"
                        },
                        new
                        {
                            Id = "user-2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e9121be-cac5-4f31-b531-918334510cb2",
                            Email = "user2@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@TEST.COM",
                            NormalizedUserName = "USER2@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJudYEgfStKwaNASOJ+yy6zOo04ahgY/tmnceQsSf2P/1BomqATP+pLfKA9NBAE22g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51eb6e91-f242-4b65-a359-2661ff080f56",
                            TwoFactorEnabled = false,
                            UserName = "user2@test.com"
                        },
                        new
                        {
                            Id = "user-3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b8c90c5-e126-4372-a8dd-92dcd79aa19f",
                            Email = "user3@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@TEST.COM",
                            NormalizedUserName = "USER3@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENfQdkW0i1TintngBd3+/PtQijJ+YjJQNgXZzJr8JnlTrHVCyHq/coEQ16Nz9odSDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88f00d0e-2e0a-484d-9dc6-7eea3ef461cf",
                            TwoFactorEnabled = false,
                            UserName = "user3@test.com"
                        },
                        new
                        {
                            Id = "user-4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f793526-cf67-4b5b-a5c1-067621985ed3",
                            Email = "user4@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@TEST.COM",
                            NormalizedUserName = "USER4@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMBNtFIpSVOqG5e7Unitj/KyZ4U47/JP3y5M6rG8BEwUTvFPd8GjyVFdihwvnDAihA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08ede835-a458-460c-8638-72fe3d6ec1c1",
                            TwoFactorEnabled = false,
                            UserName = "user4@test.com"
                        },
                        new
                        {
                            Id = "user-5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2b0650d-0a9a-408d-81ef-fe8ccc317e00",
                            Email = "user5@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@TEST.COM",
                            NormalizedUserName = "USER5@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFAjEPhbd1CpQVakqGJS0SrWY7rbMc2z2ywYfvo8yhrfwxQ9etw8s7W4IR8xfcDUAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ae1ff4e-65a9-4f45-8803-ee091ec616ff",
                            TwoFactorEnabled = false,
                            UserName = "user5@test.com"
                        });
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PdfUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitsSold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LongDescription = "High-performance Laptop Apple MacBook",
                            Name = "Laptop Apple MacBook Air 13-inch",
                            PdfUrl = "/docs/laptop.pdf",
                            Price = 6499.99m,
                            ShortDescription = "Laptop Apple MacBook",
                            Stock = 12,
                            ThumbnailUrl = "/images/laptop1.jpg",
                            UnitsSold = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LongDescription = "Latest Android smartphone",
                            Name = "Smartphone",
                            PdfUrl = "/docs/phone.pdf",
                            Price = 2999.50m,
                            ShortDescription = "Android Phone",
                            Stock = 35,
                            ThumbnailUrl = "/images/phone1.jpg",
                            UnitsSold = 120
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            LongDescription = "Wireless noise-canceling headphones",
                            Name = "Headphones",
                            PdfUrl = "/docs/headphones.pdf",
                            Price = 499.99m,
                            ShortDescription = "Noise-canceling",
                            Stock = 20,
                            ThumbnailUrl = "/images/headphones1.jpg",
                            UnitsSold = 75
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LongDescription = "Learn C# from scratch",
                            Name = "C# Programming",
                            PdfUrl = "/docs/csharp.pdf",
                            Price = 149.99m,
                            ShortDescription = "C# Book",
                            Stock = 80,
                            ThumbnailUrl = "/images/csharp1.jpg",
                            UnitsSold = 40
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            LongDescription = "Master Blazor and .NET",
                            Name = "Blazor Guide",
                            PdfUrl = "/docs/blazor.pdf",
                            Price = 199.99m,
                            ShortDescription = "Blazor Development",
                            Stock = 50,
                            ThumbnailUrl = "/images/blazor1.jpg",
                            UnitsSold = 65
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            LongDescription = "Understand software design principles",
                            Name = "Software Design Patterns",
                            PdfUrl = "/docs/designpatterns.pdf",
                            Price = 169.00m,
                            ShortDescription = "Design Patterns",
                            Stock = 40,
                            ThumbnailUrl = "/images/designpatterns1.jpg",
                            UnitsSold = 58
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            LongDescription = "Comfortable office chair with lumbar support",
                            Name = "Office Chair",
                            PdfUrl = "/docs/chair.pdf",
                            Price = 899.99m,
                            ShortDescription = "Ergonomic Chair",
                            Stock = 18,
                            ThumbnailUrl = "/images/chair1.jpg",
                            UnitsSold = 34
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            LongDescription = "Modern wooden office desk",
                            Name = "Desk",
                            PdfUrl = "/docs/desk.pdf",
                            Price = 1149.99m,
                            ShortDescription = "Wooden Desk",
                            Stock = 15,
                            ThumbnailUrl = "/images/desk1.jpg",
                            UnitsSold = 22
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            LongDescription = "Spacious bookshelf for organizing books",
                            Name = "Bookshelf",
                            PdfUrl = "/docs/bookshelf.pdf",
                            Price = 599.50m,
                            ShortDescription = "Wooden Shelf",
                            Stock = 25,
                            ThumbnailUrl = "/images/bookshelf1.jpg",
                            UnitsSold = 38
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            LongDescription = "Energy-efficient LED table lamp",
                            Name = "Table Lamp",
                            PdfUrl = "/docs/lamp.pdf",
                            Price = 149.00m,
                            ShortDescription = "LED Lamp",
                            Stock = 60,
                            ThumbnailUrl = "/images/lamp1.jpg",
                            UnitsSold = 55
                        });
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 10,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great product! Review #1",
                            CreatedAt = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Rating = 5,
                            UserId = "user-5"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Great product! Review #2",
                            CreatedAt = new DateTime(2025, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Rating = 4,
                            UserId = "user-3"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Great product! Review #3",
                            CreatedAt = new DateTime(2024, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4,
                            Rating = 4,
                            UserId = "user-3"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Great product! Review #4",
                            CreatedAt = new DateTime(2024, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            Rating = 5,
                            UserId = "user-4"
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Great product! Review #5",
                            CreatedAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            Rating = 4,
                            UserId = "user-2"
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Great product! Review #6",
                            CreatedAt = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Rating = 4,
                            UserId = "user-5"
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Great product! Review #7",
                            CreatedAt = new DateTime(2024, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            Rating = 5,
                            UserId = "user-1"
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Great product! Review #8",
                            CreatedAt = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            Rating = 5,
                            UserId = "user-1"
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Great product! Review #9",
                            CreatedAt = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            Rating = 4,
                            UserId = "user-1"
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Great product! Review #10",
                            CreatedAt = new DateTime(2025, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            Rating = 3,
                            UserId = "user-2"
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Great product! Review #11",
                            CreatedAt = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Rating = 4,
                            UserId = "user-4"
                        },
                        new
                        {
                            Id = 12,
                            Comment = "Great product! Review #12",
                            CreatedAt = new DateTime(2025, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            Rating = 4,
                            UserId = "user-5"
                        },
                        new
                        {
                            Id = 13,
                            Comment = "Great product! Review #13",
                            CreatedAt = new DateTime(2024, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            Rating = 5,
                            UserId = "user-3"
                        },
                        new
                        {
                            Id = 14,
                            Comment = "Great product! Review #14",
                            CreatedAt = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            Rating = 3,
                            UserId = "user-3"
                        },
                        new
                        {
                            Id = 15,
                            Comment = "Great product! Review #15",
                            CreatedAt = new DateTime(2025, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4,
                            Rating = 3,
                            UserId = "user-5"
                        },
                        new
                        {
                            Id = 16,
                            Comment = "Great product! Review #16",
                            CreatedAt = new DateTime(2025, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4,
                            Rating = 3,
                            UserId = "user-5"
                        },
                        new
                        {
                            Id = 17,
                            Comment = "Great product! Review #17",
                            CreatedAt = new DateTime(2024, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4,
                            Rating = 3,
                            UserId = "user-3"
                        },
                        new
                        {
                            Id = 18,
                            Comment = "Great product! Review #18",
                            CreatedAt = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            Rating = 5,
                            UserId = "user-2"
                        },
                        new
                        {
                            Id = 19,
                            Comment = "Great product! Review #19",
                            CreatedAt = new DateTime(2025, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Rating = 5,
                            UserId = "user-2"
                        },
                        new
                        {
                            Id = 20,
                            Comment = "Great product! Review #20",
                            CreatedAt = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Rating = 5,
                            UserId = "user-3"
                        });
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bestseller"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Eco-Friendly"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Budget"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Premium"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Trending"
                        });
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CartItem", b =>
                {
                    b.HasOne("Cart", null)
                        .WithMany("Items")
                        .HasForeignKey("CartId");

                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Product", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.ProductImage", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.ProductTag", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Product", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Review", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Wishlist", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.WishlistItem", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IR_WEBAPP_Strimbeanu.Models.Wishlist", "Wishlist")
                        .WithMany("Items")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IR_WEBAPP_Strimbeanu.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Reviews");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("IR_WEBAPP_Strimbeanu.Models.Wishlist", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
