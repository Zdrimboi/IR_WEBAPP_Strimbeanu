@page "/products"

@using IR_WEBAPP_Strimbeanu.Data
@using IR_WEBAPP_Strimbeanu.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@using System.Linq
@using System.Collections.Generic
@using Radzen
@inject CartService CartService
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default-base.css" />
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css" />
<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<div class="container my-5">

    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold">Browse Products</h2>
        <span class="badge bg-secondary fs-6">
            🛒 Items in cart: <strong>@cartItemCount</strong>
        </span>
    </div>

    <!-- Filter Row -->
    <div class="row mb-4">
        <!-- Category Checkboxes -->
        <div class="col-md-2">
            <h5>Category</h5>
            @foreach (var cat in categories)
            {
                <div>
                    <input type="checkbox"
                           @bind="cat.IsSelected"
                           @bind:after="RecalcFilters"
                           disabled="@(!cat.IsEnabled)"
                           style="margin-right:4px;" />
                    @cat.Name (@cat.ItemCount)
                </div>
            }
        </div>

        <!-- Price Range using RadzenSlider (Range="true") -->
        <div class="col-md-3">
            <h5>Price Range</h5>
            <Radzen.Blazor.RadzenSlider Range="true"
                          Min="@(absoluteMinPrice)"
                          Max="@(absoluteMaxPrice)"
                          Step="1"
                          Value="@priceRange"
                          TValue="IEnumerable<double>"
                          Change="@OnSliderChanged"
                          Style="width: 300px;" />
            <div class="d-flex justify-content-between">
                <small>@priceRange?.First().ToString("0.00") RON</small>
                <small>@priceRange?.Last().ToString("0.00") RON</small>
            </div>

        </div>

        <!-- Rating Filter -->
        <div class="col-md-2">
            <h5>Min Rating</h5>
            <select class="form-select"
                    @bind="ratingMin"
                    @bind:after="RecalcFilters">
                <option value="0">All</option>
                <option value="1">≥1 ⭐</option>
                <option value="2">≥2 ⭐</option>
                <option value="3">≥3 ⭐</option>
                <option value="4">≥4 ⭐</option>
                <option value="5">5 ⭐ only</option>
            </select>
        </div>

        <!-- Sort -->
        <div class="col-md-3">
            <h5>Sort By</h5>
            <select class="form-select"
                    @bind="sortOption"
                    @bind:after="RecalcFilters">
                <option value="none">None</option>
                <option value="price_asc">Price (Low→High)</option>
                <option value="price_desc">Price (High→Low)</option>
                <option value="rating_asc">Rating (Low→High)</option>
                <option value="rating_desc">Rating (High→Low)</option>
            </select>
        </div>
    </div>

    <!-- Product Grid -->
    @if (filteredProducts == null)
    {
        <div class="alert alert-info">Loading products...</div>
    }
    else if (!filteredProducts.Any())
    {
        <div class="alert alert-warning">No products found.</div>
    }
    else
    {
        <div class="row">
            @foreach (var product in filteredProducts)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="card h-100 shadow-sm border-0">
                        <a href="/product/@product.Id">
                            <img src="@product.ThumbnailUrl"
                                 class="card-img-top p-2"
                                 alt="@product.Name"
                                 style="object-fit: contain; height: 220px;" />
                        </a>
                        <div class="card-body d-flex flex-column">
                            <h6 class="card-title mb-1">@product.Name</h6>
                            <small class="text-muted">@product.Category?.Name</small>
                            <p class="text-muted small mb-1">
                                Price: <strong>@product.Price.ToString("0.00") RON</strong>
                            </p>
                            <p class="text-muted small mb-1">In stock: @product.Stock</p>
                            <p class="text-muted small mb-1">Rating: ⭐ @product.AverageRating</p>
                            <p class="card-text text-truncate small">@product.ShortDescription</p>
                            <div class="mt-auto d-flex gap-2">
                                <input type="number"
                                       min="1"
                                       max="@product.Stock"
                                       class="form-control form-control-sm w-50"
                                       @bind="quantities[product.Id]" />
                                <button class="btn btn-sm btn-outline-primary w-50"
                                        @onclick="() => AddToCart(product)">
                                    <i class="bi bi-cart-plus"></i> Add
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Product> allProducts = new();
    private List<Product> filteredProducts = new();

    private List<CategoryFilter> categories = new();

    // Price extremes as double
    private int absoluteMinPrice = 0;
    private int absoluteMaxPrice = 1;

    // Two-knob slider value
    private IEnumerable<double> priceRange = new double[] { 0, 9999 };

    private int ratingMin = 0;
    private string sortOption = "none";

    private string? searchTerm;

    private int cartItemCount = 0;
    private Dictionary<int, int> quantities = new();

    protected override async Task OnInitializedAsync()
    {
        // Load products
        allProducts = await DbContext.Products
            .Include(p => p.Category)
            .ToListAsync();

        // Compute min / max
        decimal minP = allProducts.Min(p => p.Price);
        decimal maxP = allProducts.Max(p => p.Price);

        absoluteMinPrice = (int)minP - 1;
        absoluteMaxPrice = (int)maxP + 1;

        // If no range => avoid zero-range
        if (absoluteMaxPrice <= absoluteMinPrice)
        {
            absoluteMaxPrice = absoluteMinPrice + 1;
        }

        // default slider range
        priceRange = new double[] { absoluteMinPrice, absoluteMaxPrice };

        // Build categories
        var catGroups = allProducts
            .Where(p => p.Category != null)
            .GroupBy(p => p.Category.Id)
            .Select(g => g.First().Category);

        categories = catGroups
            .Select(c => new CategoryFilter
            {
                Id = c.Id,
                Name = c.Name,
                IsSelected = false,
                IsEnabled = true,
                ItemCount = 0
            }).ToList();

        // parse ?search
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var qp = QueryHelpers.ParseQuery(uri.Query);
        if (qp.TryGetValue("search", out var sVal))
        {
            searchTerm = sVal;
        }

        filteredProducts = new List<Product>(allProducts);

        // init cart quantities
        foreach (var p in allProducts)
        {
            quantities[p.Id] = 1;
        }

        RecalcFilters();
        await LoadCartCountAsync();
    }

    private async Task LoadCartCountAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var appUser = await UserManager.GetUserAsync(user);
            var cart = await CartService.GetCartAsync(appUser);
            cartItemCount = cart.Items.Sum(i => i.Quantity);
        }
    }

    private void OnSliderChanged(object value)
    {
        // The slider passes the new selected range in `value` 
        // Convert it to IEnumerable<double>
        var newRange = (IEnumerable<double>)value;

        // Store in our field
        priceRange = newRange;

        // Then apply filters
        RecalcFilters();
    }

    private void RecalcFilters()
    {
        IEnumerable<Product> query = allProducts;

        // categories
        var chosenCatIds = categories
            .Where(c => c.IsSelected)
            .Select(c => c.Id)
            .ToHashSet();

        if (chosenCatIds.Any())
        {
            query = query.Where(p => chosenCatIds.Contains(p.CategoryId));
        }

        // search
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(p => p.Name.Contains(searchTerm));
        }

        // rating
        if (ratingMin > 0)
        {
            query = query.Where(p => p.AverageRating >= ratingMin);
        }

        // price
        double minVal = priceRange.First();
        double maxVal = priceRange.Last();
        query = query.Where(p => p.Price >= (decimal)minVal && p.Price <= (decimal)maxVal);

        // sorting
        query = sortOption switch
        {
            "price_asc" => query.OrderBy(p => p.Price),
            "price_desc" => query.OrderByDescending(p => p.Price),
            "rating_asc" => query.OrderBy(p => p.AverageRating),
            "rating_desc" => query.OrderByDescending(p => p.AverageRating),
            _ => query
        };

        filteredProducts = query.ToList();

        // dynamic category feasibility
        foreach (var c in categories)
        {
            bool was = c.IsSelected;
            c.IsSelected = true;
            var testList = BuildTestList();
            c.ItemCount = testList.Count;
            c.IsEnabled = (testList.Count > 0);
            c.IsSelected = was;
        }
    }

    private List<Product> BuildTestList()
    {
        IEnumerable<Product> q = allProducts;

        var chosenCatIds = categories
            .Where(c => c.IsSelected)
            .Select(c => c.Id)
            .ToHashSet();

        if (chosenCatIds.Any())
            q = q.Where(p => chosenCatIds.Contains(p.CategoryId));

        if (!string.IsNullOrWhiteSpace(searchTerm))
            q = q.Where(p => p.Name.Contains(searchTerm));

        if (ratingMin > 0)
            q = q.Where(p => p.AverageRating >= ratingMin);

        double minVal = priceRange.First();
        double maxVal = priceRange.Last();
        q = q.Where(p => p.Price >= (decimal)minVal && p.Price <= (decimal)maxVal);

        return q.ToList();
    }

    private async Task AddToCart(Product product)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var appUser = await UserManager.GetUserAsync(user);
            int quantity = quantities.ContainsKey(product.Id) ? quantities[product.Id] : 1;
            await CartService.AddToCartAsync(appUser, product, quantity);
            await LoadCartCountAsync();
        }
        else
        {
            Navigation.NavigateTo("/Account/Login");
        }
    }
}

// CategoryFilter model
public class CategoryFilter
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public bool IsSelected { get; set; }
    public bool IsEnabled { get; set; } = true;
    public int ItemCount { get; set; }
}
