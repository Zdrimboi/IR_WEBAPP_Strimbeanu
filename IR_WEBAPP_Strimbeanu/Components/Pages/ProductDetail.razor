@page "/product/{id:int}"
@using IR_WEBAPP_Strimbeanu.Data
@using IR_WEBAPP_Strimbeanu.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CartService CartService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="container py-5">
    @if (product == null)
    {
        <div class="alert alert-info">Loading...</div>
    }
    else
    {
        <div class="row">
            <!-- Product Images -->
            <div class="col-md-6">
                <img src="@product.ThumbnailUrl" class="img-fluid rounded shadow-sm" alt="@product.Name" />
                <div class="mt-3">
                    <h5>Gallery</h5>
                    <div class="row">
                        @foreach (var image in product.Images)
                        {
                            <div class="col-4 mb-2">
                                <img src="@image.ImageUrl" class="img-thumbnail" alt="Product Image" />
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Product Info -->
            <div class="col-md-6">
                <h2 class="fw-bold">@product.Name</h2>
                <p class="text-muted">Category: @product.Category?.Name</p>
                <p class="lead">@product.LongDescription</p>

                <div class="mb-3">
                    <p><strong>Price:</strong> @product.Price.ToString("0.00") RON</p>
                    <p><strong>Stock:</strong> @product.Stock</p>
                    <p><strong>Units Sold:</strong> @product.UnitsSold</p>
                    <!-- 
                    Dynamically computed rating from Reviews.
                    Make sure your Product model has `[NotMapped] public double ComputedAverageRating => Reviews.Average(...)`
                    -->
                    <p><strong>Average Rating:</strong> ⭐ @product.AverageRating</p>
                </div>

                <div class="mb-3">
                    <label>Quantity:</label>
                    <input type="number" min="1" max="@product.Stock" class="form-control w-25 d-inline-block me-2" @bind="selectedQuantity" />
                    <button class="btn btn-success" @onclick="AddToCart">🛒 Add to Cart</button>
                </div>
                @if (@product.PdfUrl != string.Empty)
                {
                    <a href="/product/@product.Id/docs" class="btn btn-outline-secondary">📄 View Documentation</a>
                }
                <a href="/products" class="btn btn-primary ms-2">⬅ Back to Products</a>
                </div>
            </div>

            <hr class="my-5" />

            <!-- User Review Submission -->
            <div class="mb-5">
                <h4>Leave a Review</h4>
            @if (isAuthenticated)
            {
                        <div class="mb-3">
                            <textarea class="form-control" placeholder="Write your review here..." @bind="newReviewText"></textarea>
                        </div>
                        <div class="mb-3">
                            <label>Rating:</label>
                            <select class="form-select w-25" @bind="newReviewRating">
                        @for (int i = 1; i <= 5; i++)
                        {
                                        <option value="@i">@i ⭐</option>
                        }
                            </select>
                        </div>
                        <button class="btn btn-primary" @onclick="SubmitReview">Submit Review</button>
            }
            else
            {
                        <p><a href="/Account/Login">Log in</a> to write a review.</p>
            }
            </div>

            <!-- Display Reviews -->
            <div>
                <h4>Customer Reviews</h4>
            @if (!reviews.Any())
            {
                        <p>No reviews yet.</p>
            }
            else
            {
                @foreach (var r in reviews)
                {
                                <div class="border rounded p-3 mb-2">
                                    <strong>@r.User?.UserName</strong> - ⭐ @r.Rating<br />
                                    <small class="text-muted">@r.CreatedAt.ToShortDateString()</small>
                                    <p class="mb-0">@r.Comment</p>
                                </div>
                }
            }
            </div>

            <hr class="my-5" />

            <!-- Related Products -->
            <div>
                <h4>Related Products</h4>
                <div class="row">
                @foreach (var rp in relatedProducts)
                {
                            <div class="col-md-3 mb-4">
                                <div class="card h-100">
                                    <a href="/product/@rp.Id">
                                        <img src="@rp.ThumbnailUrl" class="card-img-top" alt="@rp.Name" style="height: 180px; object-fit: contain;" />
                                    </a>
                                    <div class="card-body">
                                        <h6 class="card-title">@rp.Name</h6>
                                        <p class="text-muted small">@rp.Price.ToString("0.00") RON</p>
                                    </div>
                                </div>
                            </div>
                }
                </div>
            </div>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private Product? product;
    private List<Review> reviews = new();
    private List<Product> relatedProducts = new();
    private int selectedQuantity = 1;
    private string newReviewText = string.Empty;
    private int newReviewRating = 5;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        // Load product and related data 
        product = await DbContext.Products
            .Include(p => p.Category)
            .Include(p => p.Images)
            .Include(p => p.Reviews) // so product.ComputedAverageRating can work
            .FirstOrDefaultAsync(p => p.Id == id);

        if (product != null)
        {
            // Load separate list of reviews for display
            reviews = await DbContext.Reviews
                .Include(r => r.User)
                .Where(r => r.ProductId == product.Id)
                .OrderByDescending(r => r.CreatedAt)
                .ToListAsync();

            // Load related 
            relatedProducts = await DbContext.Products
                .Where(p => p.CategoryId == product.CategoryId && p.Id != product.Id)
                .Take(4)
                .ToListAsync();
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private async Task AddToCart()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false && product != null && selectedQuantity > 0)
        {
            var appUser = await UserManager.GetUserAsync(user);
            await CartService.AddToCartAsync(appUser, product, selectedQuantity);

            Navigation.NavigateTo("/cart");
        }
        else
        {
            Navigation.NavigateTo("/Account/Login");
        }
    }

    private async Task SubmitReview()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false && product != null)
        {
            var appUser = await UserManager.GetUserAsync(user);
            var review = new Review
                {
                    ProductId = product.Id,
                    UserId = appUser.Id,
                    Rating = newReviewRating,
                    Comment = newReviewText,
                    CreatedAt = DateTime.Now
                };

            DbContext.Reviews.Add(review);
            await DbContext.SaveChangesAsync();

            // Clear form
            newReviewText = string.Empty;
            newReviewRating = 5;

            // Insert into top of reviews list
            reviews.Insert(0, review);

            // You could refresh product.Reviews if you want updated product.ComputedAverageRating:
            product.Reviews.Add(review);
        }
    }
}
