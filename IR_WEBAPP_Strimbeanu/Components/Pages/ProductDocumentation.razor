@page "/product/{id:int}/docs"
@using IR_WEBAPP_Strimbeanu.Data
@using IR_WEBAPP_Strimbeanu.Models
@inject ApplicationDbContext DbContext
@inject IJSRuntime JS
@rendermode InteractiveServer

@if (product == null)
{
    <div class="container py-5">
        <p class="alert alert-info">Loading...</p>
    </div>
}
else if (string.IsNullOrWhiteSpace(product.PdfUrl))
{
    <div class="container py-5">
        <p class="alert alert-warning">No PDF available for this product.</p>
    </div>
}
else
{
    <div class="container-fluid py-4">
        <div class="row mb-4">
            <div class="col-12">
                <h3 class="fw-bold mb-2">📄 @product.Name</h3>
                <p class="text-muted">@product.LongDescription</p>
            </div>
        </div>

        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-4 col-lg-3 mb-3">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">🔎 Search in PDF</h5>

                        <div class="input-group mb-2">
                            <input class="form-control" type="text" placeholder="Search..." @bind="searchQuery" />
                            <select class="form-select w-auto" @bind="selectedFilter">
                                <option value="exact">Exact Match</option>
                                <option value="most">Most Similar First</option>
                                <option value="least">Least Similar First</option>
                            </select>
                            <button class="btn btn-outline-primary" @onclick="SearchPdf">🔍</button>
                        </div>

                        @if (searchMatches.Any())
                        {
                            <div class="overflow-auto" style="max-height: 650px;">
                                <ul class="list-group">
                                    @foreach (var match in searchMatches)
                                    {
                                        <li class="list-group-item small"
                                            style="cursor: pointer;"
                                            @ondblclick="@(() => ScrollToMatch(match.PageNumber))">
                                            <strong>Page @match.PageNumber</strong>
                                            <span class="text-muted">(distance: @match.Distance)</span><br />
                                            @match.Snippet
                                        </li>
                                    }
                                </ul>
                            </div>
                            @if (canLoadMore)
                            {
                                <button class="btn btn-sm btn-secondary mt-3" @onclick="LoadMoreMatches">Load More</button>
                            }
                        }
                        else if (searchPerformed)
                        {
                            <p class="text-muted">No matches found.</p>
                        }
                    </div>
                </div>
            </div>

            <!-- PDF Viewer -->
            <div class="col-md-8 col-lg-9">
                <div class="border rounded shadow-sm p-2 bg-white">
                    <iframe id="pdfViewer"
                            src="@($"{product.PdfUrl}#toolbar=1")"
                            width="100%" height="800px"
                            style="border: none;"></iframe>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private Product? product;
    private string searchQuery = string.Empty;
    private string selectedFilter = "exact";
    private List<SearchResult> searchMatches = new();
    private int currentPage = 0;
    private int pageSize = 100;
    private int totalMatches = 0;
    private bool searchPerformed = false;

    private bool canLoadMore => searchMatches.Count < totalMatches;

    protected override async Task OnInitializedAsync()
    {
        product = await DbContext.Products.FindAsync(id);
    }

    private async Task SearchPdf()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        searchPerformed = true;
        searchMatches.Clear();
        currentPage = 0;

        totalMatches = await JS.InvokeAsync<int>("searchInPdf", searchQuery);
        await LoadMoreMatches();
    }

    private async Task LoadMoreMatches()
    {
        var chunk = await JS.InvokeAsync<List<SearchResult>>("getSearchMatchesPage", currentPage, pageSize);

        var filtered = selectedFilter switch
        {
            "exact" => chunk.Where(m => m.Exact),
            "most" => chunk.OrderBy(m => m.Distance),
            "least" => chunk.OrderByDescending(m => m.Distance),
            _ => chunk
        };

        searchMatches.AddRange(filtered);
        currentPage++;
        StateHasChanged();
    }

    private Task ScrollToMatch(int page)
    {
        return JS.InvokeVoidAsync("goToMatch", page).AsTask();
    }

    public class SearchResult
    {
        public int PageNumber { get; set; }
        public string Snippet { get; set; } = string.Empty;
        public string Word { get; set; } = string.Empty;
        public int Distance { get; set; }
        public bool Exact { get; set; }
    }
}
